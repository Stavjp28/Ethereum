// SPDX-License-Identifier: MIT
pragma solidity ^0.5.0;

// Define a new contract named `JointSavings`
contract JointSavings {
    address payable public accountOne;
    address payable public accountTwo;
    address public lastToWithdraw;
    uint public lastWithdrawAmount;
    uint public contractBalance;

    // Define a function named `withdraw` that will accept two arguments.
    function withdraw(uint amount, address payable recipient) public {
        // Define a `require` statement that checks if the `recipient` is equal to either `accountOne` or `accountTwo`. The `require` statement returns the text "You don't own this account!" if it does not.
        require(recipient == accountOne || recipient == accountTwo, "You don't own this account!");

        // Define a `require` statement that checks if the `balance` is sufficient to accomplish the withdraw operation. If there are insufficient funds, the text `Insufficient funds!` is returned.
        require(contractBalance >= amount, "Insufficient funds!");

        // Add an `if` statement to check if the `lastToWithdraw` is not equal to (`!=`) `recipient`. If `lastToWithdraw` is not equal, then set it to the current value of `recipient`.
        if (lastToWithdraw != recipient) {
            lastToWithdraw = recipient;
        }

        // Call the `transfer` function of the `recipient` and pass it the `amount` to transfer as an argument.
        recipient.transfer(amount);

        // Set `lastWithdrawAmount` equal to `amount`
        lastWithdrawAmount = amount;

        // Call the `contractBalance` variable and set it equal to the balance of the contract by using `address(this).balance` to reflect the new balance of the contract.
        contractBalance = address(this).balance;
    }

    // Define a `public payable` function named `deposit`.
    function deposit() public payable {
        // Deposit function code
    }
